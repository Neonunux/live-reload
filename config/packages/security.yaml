security:
    encoders:
        App\Entity\Users:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        app_user_provider: 
            entity:
                class: App\Entity\Users

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            lazy: true
        api:
            stateless: true
            anonymous: true
            lazy: true
            provider: users_in_memory
            # provider: app_user_provider
            # json_login:
            #     check_path: /token/authentication
            #     username_path: username
            #     password_path: password_path
            #     success_handler: lexik_jwt_authentication.handler.authentication_success
            #     failure_handler: lexik_jwt_authentication.handler.authentication_failure
            # guard:
            #     authenticators:
            #         - lexik_jwt_authentication.jwt_token_authenticator


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/docs, roles: IS_AUTHENTICATED_ANONYMOUSLY } # Allows accessing the Swagger UI
        # - { path: ^/token/authentication, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # # - { path: ^/, roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY } # Allows accessing the Swagger UI
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
